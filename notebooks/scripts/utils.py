def shift_lags_for_enso(df, factor, lags=24):
    """Creates lagged features in a DataFrame for a given factor."""
    df_copy = df.copy()
    for lag in range(1, lags+1):
        df_copy[f"{factor}_{lag}"] = df_copy[factor].shift(lag)
    return df_copy

def model_initialize (df, endog, exog):
    """Initializes a SARIMA forecasting model using provided data, endogenous, and exogenous variables."""
    return SARIMAForecaster(data=df, endog=endog, exog=exog)

def find_optimal_lags (model, date_range, name, order_range = range(1, 12), with_exog = True ):
    """Determines optimal lag orders for a SARIMA model, plots performance metrics, and considers exogenous variables if specified."""
    evaluation_result1 = model.find_optimal_lag_for_endog(date_range=date_range, matrix="rmse", order_range=range(1, 12))
    fig1 = model.plot_order_performance(evaluation_result1, title=f"Lag Performance Metrics for {name} log Return without ENSO, order={model.order}")

    if (with_exog):
        # 2. find optimal lag for enso
        evaluation_result2 = model.find_optimal_lag_for_exog(date_range)
        fig2 = model.plot_order_performance(evaluation_result2, title=f"Lag Performance Metrics for {name} log Return with ENSO, order={model.order}, enso_lag={model.exog}")
    
        
def plot_pred_vs_forecast(model, date_range, with_exog):
    """Plots predictions and forecasts generated by a SARIMA model, including the option to consider exogenous variables."""
    forecasts = model.one_step_ahead_forecastings(date_range = date_range, with_exog = with_exog)
    model.plot_predictions(forecasts=forecasts, date_range=date_range )


def prepare_data(table, climate_index, commodity):
    """Prepares and merges data from a SQL database for analysis, incorporating climate indices and commodities, and adds lagged features."""
    df = pd.read_sql_query(f"SELECT * FROM {table}", dl.conn,
                       index_col='index', parse_dates='index')
    
    teleconnection = pd.read_sql_query("SELECT * FROM jra55", dl.conn,
                       index_col='date', parse_dates='index')

    chosen_index =  teleconnection[[climate_index]]
    chosen_index = chosen_index.loc['1970-01-01':'2018-12-01']

    df.index = pd.to_datetime(df.index)
    chosen_index.index = pd.to_datetime(chosen_index.index)

    result = df.merge(chosen_index[[f'{climate_index}']], left_index=True, right_index=True, how='left')

    commodity = result[[commodity, climate_index]]
    commodity_with_lags = shift_lags_for_enso(commodity, climate_index, lags=12)

    return commodity_with_lags

def run_tests_optimal_lag_order(data, endog, exog, with_exog):
    """Runs a series of tests for SARIMA modeling, including lag order optimization and prediction plotting."""
    model = model_initialize(data, endog, exog)
    find_optimal_lags(model, date_range=date_range ,name=endog , with_exog=with_exog)
    plot_pred_vs_forecast(model, date_range=date_range, with_exog=with_exog)
